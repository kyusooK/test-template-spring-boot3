server:
  port: 8080

spring:
  application:
    name: {{name}}
    
  profiles:
    active: default
  
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        show_sql: true
        dialect: org.hibernate.dialect.H2Dialect
  
  h2:
    console:
      enabled: true
      path: /h2-console
      
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:{{nameCamelCase}};DB_CLOSE_DELAY=-1
    username: sa
    password: 
  
  cloud:
    function:
      definition: eventConsumer
    stream:
      kafka:
        binder:
          brokers: localhost:9092
      bindings:
        event-in:
          destination: {{name}}
          group: {{name}}
        event-out:
          destination: {{name}}

logging:
  level:
    root: INFO
    org.hibernate.SQL: DEBUG
    {{options.package}}: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

{{#circuitBreaker}}
#<<< Resilency / Circuit Breaker
feign:
  hystrix:
    enabled: true
  client:
    config:
      default:
        connectTimeout: 3000  # 연결 timeout
        readTimeout: 610      # 응답 대기 timeout
        retryer:
          period: 2000        # 재시도 주기 
          maxPeriod: 5000     # 최대 재시도 주기 
          maxAttempts: 2      # 최대 재시도 횟수 
hystrix:
  command:
    # 전역설정
    default:
      execution.isolation.thread.timeoutInMilliseconds: 610 # 읽기 타임아웃 (밀리초 단위)
#>>> Resilency / Circuit Breaker
{{/circuitBreaker}}

---
spring:
  profiles: docker
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    stream:
      kafka:
        binder:
          brokers: my-kafka:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: {{name}}
          destination: {{options.package}}
          contentType: application/json
        event-out:
          destination: {{options.package}}
          contentType: application/json

{{#checkCommandRelation relationCommandInfo}}
api:
  url: 
    {{#setApiUrl relationCommandInfo false}}{{/setApiUrl}}
{{/checkCommandRelation}}


<function>
window.$HandleBars.registerHelper('checkException', function (aggregates) {
  try {
    if(!aggregates) {
        return false;
    }
    var res = false;
    for(var i = 0; i<aggregates.length; i++){
      if(aggregates[i].aggregateRoot.entities.elements) {
        Object.values(aggregates[i].aggregateRoot.entities.elements).forEach(function(item) {
          if(item) {
            if(item._type.endsWith('Exception')) {
              res = true;
            }
          }
        })
      }
    }
    return res;
  } catch(e){
    console.log(e)
  }
});

window.$HandleBars.registerHelper('checkCommandRelation', function (relationCommandInfo, options) {
    if(!relationCommandInfo){
      return options.inverse(this)
    }
    else{
      if(relationCommandInfo.length < 0){
        return options.inverse(this)
      }
      return options.fn(this)
    }
});

window.$HandleBars.registerHelper('setApiUrl', function (relationCommandInfo, isPortGen) {
  var text = "";

  relationCommandInfo.forEach(function(item) {
    if(!text.includes(item.commandValue.boundedContext.name)) {
      if(isPortGen) {
        text += item.commandValue.boundedContext.name + ": localhost:" + item.commandValue.boundedContext.portGenerated + " \n    ";
      } else {
        text += item.commandValue.boundedContext.name + ": " +item.commandValue.boundedContext.name +":8080 \n    ";
      }
    }
  })
  
  return text;
});

window.$HandleBars.registerHelper('toLowerCase', function(str) {
  return str.toLowerCase();
});
</function>
